import os
import time
import socket
import sys
import requests
from pyrogram import Client, filters
from colorama import Fore, Style
from art import text2art
import importlib.util
import logging
import asyncio
import subprocess

# –ü–∞–ø–∫–∞ –¥–ª—è —Å–µ—Å—Å–∏–π –∏ –ª–æ–≥–æ–≤
session_folder = "sessions"
logs_folder = "logs"

# –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
required_libraries = ['pyrogram', 'requests', 'colorama', 'art']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
def install_libraries():
    for library in required_libraries:
        try:
            __import__(library)
        except ImportError:
            print(f"{Fore.RED}–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {library} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...{Style.RESET_ALL}")
            subprocess.check_call([sys.executable, "-m", "pip", "install", library])

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
install_libraries()

app = Client("Lumix")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
os.makedirs(session_folder, exist_ok=True)
os.makedirs(logs_folder, exist_ok=True)

# –õ–æ–≥-—Ñ–∞–π–ª
log_filename = os.path.join(logs_folder, time.strftime("log(%Y-%m-%d, %H-%M-%S).log"))
logging.basicConfig(filename=log_filename, level=logging.INFO,
                    format='%(asctime)s - %(levelname)s - %(message)s')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –≤—Ä–µ–º–µ–Ω–µ–º
def log_message(message, color=Fore.WHITE, bold=False):
    current_time = time.strftime("%d-%m-%Y %H:%M:%S")
    if bold:
        message = f"{Style.BRIGHT}{message}{Style.RESET_ALL}"
    print(f"{color}[{current_time}]> {message}{Style.RESET_ALL}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ —Å–µ—Å—Å–∏–∏
if not os.path.exists(os.path.join(session_folder, "Lumix.session")):
    logging.warning("–§–∞–π–ª—ã —Å–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    log_message("–ù–∞—á–Ω–µ–º –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É", Fore.GREEN, bold=True)

    log_message("–í–≤–µ–¥–∏—Ç–µ API ID: ", Fore.GREEN)
    api_id = input()  # –ü–æ–ª—É—á–∞–µ–º API ID
    log_message("–í–≤–µ–¥–∏—Ç–µ API Hash: ", Fore.GREEN)
    api_hash = input()  # –ü–æ–ª—É—á–∞–µ–º API Hash
    log_message("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω—ã–π –∫ –¢–µ–ª–µ–≥—Ä–∞–º–º: ", Fore.GREEN)
    phone_number = input()  # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞

    app = Client(
        os.path.join(session_folder, "Lumix"),
        api_id=api_id,
        api_hash=api_hash,
        phone_number=phone_number
    )

    with open(os.path.join(session_folder, "config.txt"), "w") as config_file:
        config_file.write(f"API_ID: {api_id}\nAPI_HASH: {api_hash}\n")
    logging.info("API ID –∏ API Hash —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª")

else:
    with open(os.path.join(session_folder, "config.txt"), "r") as config_file:
        for line in config_file:
            if line.startswith("API_ID"):
                api_id = line.split(":")[1].strip()
            elif line.startswith("API_HASH"):
                api_hash = line.split(":")[1].strip()

    app = Client(
        os.path.join(session_folder, "Lumix"),
        api_id=api_id,
        api_hash=api_hash
    )

# –õ–æ–≥–æ—Ç–∏–ø –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
def print_logo():
    logo = text2art("Lumix", font='small')
    print(Fore.LIGHTMAGENTA_EX + logo + Style.RESET_ALL)

print_logo()
log_message("Lumix –∑–∞–ø—É—â–µ–Ω, –ø—Ä–∏–≤–µ—Ç " + socket.gethostname(), Fore.GREEN, bold=True)

# –í–µ—Ä—Å–∏—è
version = "5.0"
log_message(f"–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è : {version}", Fore.CYAN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–ª–∞–≥–∏–Ω–æ–≤
plugins_dir = "plugins"
for plugin_file in os.listdir(plugins_dir):
    if plugin_file.endswith(".py"):
        plugin_path = os.path.join(plugins_dir, plugin_file)
        plugin_name = os.path.splitext(plugin_file)[0]
        try:
            spec = importlib.util.spec_from_file_location(plugin_name, plugin_path)
            plugin_module = importlib.util.module_from_spec(spec)
            spec.loader.exec_module(plugin_module)
            plugin_module.register(app)
            logging.info(f"–ü–ª–∞–≥–∏–Ω {plugin_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
            log_message(f"–ü–ª–∞–≥–∏–Ω {plugin_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω", Fore.LIGHTYELLOW_EX)  # –ü–æ–¥—Ö–æ–¥—è—â–∏–π —Ü–≤–µ—Ç –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Å –ø–ª–∞–≥–∏–Ω–æ–º {plugin_name}: {str(e)}")
            log_message(f"–û—à–∏–±–∫–∞ —Å –ø–ª–∞–≥–∏–Ω–æ–º {plugin_name}: {str(e)}", Fore.RED)

# –ú–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏, –∫–æ–≥–¥–∞ –±–æ—Ç –±—ã–ª –∑–∞–ø—É—â–µ–Ω
start_time = time.time()

# –ö–æ–º–∞–Ω–¥–∞ .about
@app.on_message(filters.command("about", prefixes=".") & filters.me)
async def about_command(_, msg):
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
    last_start_time = time.time() - start_time
    hours, remainder = divmod(last_start_time, 3600)
    minutes, seconds = divmod(remainder, 60)
    last_start_formatted = f"{int(hours)} —á {int(minutes)} –º–∏–Ω {int(seconds)} —Å–µ–∫"

    about_text = (
        "üí°Lumix:\n"
        f"üöÄ–í–µ—Ä—Å–∏—è: {version}\n"
        f"‚ö°–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: {last_start_formatted} –Ω–∞–∑–∞–¥"
    )
    await msg.reply(about_text)

# –ö–æ–º–∞–Ω–¥–∞ .reset
@app.on_message(filters.command("reset", prefixes=".") & filters.me)
async def reset_bot(_, msg):
    await msg.edit("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫\n–ü–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è....")
    await asyncio.sleep(3)
    await msg.edit("Lumix –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω")

    # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Å—Å–∏–∏ –±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
    await app.stop()  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
    python = sys.executable
    os.execl(python, python, *sys.argv)  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏

# –ó–∞–ø—É—Å–∫
app.run()
